import csv
import numpy as np

csv_file_path = 'C:\\Users\\Janitha Mendis\\PycharmProjects\\PressureMap1\\testing10kgMM.csv'

def read_csv_data(file_path):
    data = []
    with open(file_path) as f:
        csv_reader = csv.reader(f)
        header = next(csv_reader)  # skip header
        num_rows = sum(1 for row in csv_reader)  # Count the number of rows in the CSV file
        f.seek(0)  # Reset file pointer to the beginning

        # Skip the header again for data processing
        next(csv_reader)

        for row in csv_reader:
            x = np.zeros((32, 32))
            for i in range(32):
                for j in range(32):
                    index = i * 32 + j + 12  # Adjusted index to start from column 12
                    x[i, j] = float(row[index])
            data.append(x)
    return np.array(data), num_rows




def select_and_plot_deviation(data):
    # Randomly select four (i, j) cells with at least some non-zero values
    selected_cells = []
    for _ in range(4):
        i, j = np.random.randint(0, 32, 2)  # Randomly choose i and j indices
        while np.all(data[:, i, j] == 0):  # Ensure at least some non-zero values in the selected cell
            i, j = np.random.randint(0, 32, 2)
        selected_cells.append((i, j))

    # Plot line graphs for each selected cell
    for cell in selected_cells:
        i, j = cell
        values = data[:, i, j]
        time_steps = np.arange(len(values))

        plt.plot(time_steps, values, label=f'Cell ({i}, {j})')

    plt.xlabel('Time')
    plt.ylabel('Cell Value')
    plt.title('Deviation of Cell Values with Different Time Readings')
    plt.legend()
    plt.show()

# Assuming 'data' is your 3D NumPy array with shape (number of rows, 32, 32)
# Call the function to select and plot deviation for four random cells
select_and_plot_deviation(data)



data, num_rows = read_csv_data(csv_file_path)
print(data.shape)  # (number of rows, 32, 32)
print(f"Number of rows in the CSV file: {num_rows}")

# Access a specific sensor data (42nd sensor(i10,j15), Python uses 0-based indexing)
print(data[41][10, 15])
